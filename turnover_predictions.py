# -*- coding: utf-8 -*-
"""Turnover Predictions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WOwHST3YTmJraMMyTRzXybRN_3Lg8Vfl

# **Import Library**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc

from google.colab import drive
drive.mount('/content/drive')

"""Load dataset

"""

df = pd.read_csv('/content/turnover_predictions.csv')

"""# **Data Understanding**"""

df.head()

dataset_info = df.info()

"""## EDA Univariate

Distribusi Target `Actual_Attrition`
"""

sns.countplot(x='Actual_Attrition', data=df)
plt.title('Distribusi Target: Actual Attrition')
plt.xlabel('Attrition (0 = Bertahan, 1 = Resign)')
plt.ylabel('Jumlah Karyawan')
plt.show()

"""Distribusi Fitur Numerik (contoh: `Age`, `MonthlyIncome`)"""

sns.histplot(df['Age'], kde=True)
plt.title('Distribusi Umur Karyawan')
plt.show()

sns.histplot(df['MonthlyIncome'], kde=True)
plt.title('Distribusi Gaji Bulanan')
plt.show()

"""## EDA Numerikal (Multivariate)

Korelasi antar fitur numerik
"""

plt.figure(figsize=(12,8))
sns.heatmap(df.corr(numeric_only=True), annot=True, fmt=".2f", cmap="coolwarm")
plt.title("Korelasi antar Variabel Numerik")
plt.show()

"""## EDA Kategorikal

Attrition berdasarkan `JobRole` dan `OverTime`
"""

plt.figure(figsize=(10,5))
sns.countplot(data=df, x='JobRole', hue='Actual_Attrition')
plt.xticks(rotation=45)
plt.title('Attrition berdasarkan JobRole')
plt.show()

sns.countplot(data=df, x='OverTime', hue='Actual_Attrition')
plt.title('Attrition berdasarkan OverTime')
plt.show()

"""Attrition berdasarkan BusinessTravel"""

sns.countplot(data=df, x='BusinessTravel', hue='Actual_Attrition')
plt.title('Attrition berdasarkan Business Travel')
plt.show()

"""## Tren Data

`YearsAtCompany`
"""

sns.boxplot(data=df, x='Actual_Attrition', y='YearsAtCompany')
plt.title('Attrition terhadap Lama Bekerja')
plt.xlabel('Actual Attrition')
plt.ylabel('Years at Company')
plt.show()

"""Insight:
- Proporsi karyawan resign sebesar ~16%, mayoritas tetap bertahan.

- Gaji (`MonthlyIncome`) dan umur (`Age`) memiliki penyebaran lebar dan menunjukkan korelasi negatif terhadap resign.

- Job Role Laboratory Technician dan Sales Executive memiliki jumlah resign tertinggi.

- Karyawan yang lembur (`OverTime = Yes`) cenderung lebih banyak resign.

- Frekuensi perjalanan dinas (`BusinessTravel`) menunjukkan bahwa yang sering bepergian cenderung lebih banyak resign.

# **Data Preparation / Preprocessing**

Hapus kolom yang tidak diperlukan
"""

df = df.drop(columns=['EmployeeCount', 'StandardHours', 'Over18', 'Predicted_Attrition'])

"""Encode fitur kategorikal"""

categorical_cols = df.select_dtypes(include='object').columns
df[categorical_cols] = df[categorical_cols].apply(LabelEncoder().fit_transform)

"""Pisahkan fitur dan target"""

X = df.drop(columns=['Actual_Attrition'])
y = df['Actual_Attrition']

"""Split data"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

"""# **Modeling**

Model training
"""

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

"""# **Evaluation**

Prediksi dan evaluasi
"""

y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

"""# **Visualization**

Confusion Matrix Heatmap
"""

plt.figure(figsize=(6,4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

"""ROC Curve"""

fpr, tpr, _ = roc_curve(y_test, y_pred)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(6,4))
plt.plot(fpr, tpr, label=f'AUC = {roc_auc:.2f}')
plt.plot([0, 1], [0, 1], 'k--', label='Random')
plt.title('ROC Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()
plt.grid(True)
plt.show()

"""Feature Importance"""

importances = model.feature_importances_
feat_names = X.columns
feat_imp = pd.DataFrame({'Feature': feat_names, 'Importance': importances})
feat_imp.sort_values(by='Importance', ascending=False, inplace=True)

plt.figure(figsize=(10,6))
sns.barplot(x='Importance', y='Feature', data=feat_imp.head(15))
plt.title('Top 15 Feature Importances')
plt.tight_layout()
plt.show()